//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input Action Maps/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Isometric View"",
            ""id"": ""aa5eacd2-9eed-4401-a330-e09d8a56d3a0"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""4c633278-2404-4d3c-ada9-0acfcc65cb85"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchView"",
                    ""type"": ""Button"",
                    ""id"": ""3bd52a31-de0c-4340-b032-d0b494f3b68e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""429d310e-0b2a-47ce-a70b-452837ff91bb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f4efc2fc-6d73-494b-b473-426c5fcaa561"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0e7ff0f4-5c4e-4adc-9820-fc38501adf3a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2e1f1b21-59fc-43f2-adee-3ec814455f49"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5529aa3e-8ef2-484c-8a92-bc2ade4ac1fc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""bd2c1573-a631-47f7-a248-89fdc516dc1e"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f7ecef4-8134-41f3-bc0c-ea79dca6881e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""SwitchView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e605d247-bb43-4014-b0f8-c672d6ebd511"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SwitchView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""First Person View"",
            ""id"": ""00e42d9b-a1cd-464c-9d40-6956b323ae4b"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""7385b7a1-8d32-4be5-a7a1-86c25298ec5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchView"",
                    ""type"": ""Button"",
                    ""id"": ""0e295152-2c98-41a9-ba1e-78958bdd074a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""50dd1ced-73f3-439e-a28b-f52d740c288f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""20431ca5-8747-452e-bec6-5bd67427227a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05868d01-799b-4c0b-8612-ac5f66fa9c5b"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8c032c9-835e-4ccb-9b10-8f8e67ad0323"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""SwitchView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11089d55-7fbe-4c7f-941e-c9b4f804c7dc"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SwitchView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b6b5b94-d340-4080-a72b-b26d4c366665"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard + Mouse"",
            ""bindingGroup"": ""Keyboard + Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Isometric View
        m_IsometricView = asset.FindActionMap("Isometric View", throwIfNotFound: true);
        m_IsometricView_Movement = m_IsometricView.FindAction("Movement", throwIfNotFound: true);
        m_IsometricView_SwitchView = m_IsometricView.FindAction("SwitchView", throwIfNotFound: true);
        // First Person View
        m_FirstPersonView = asset.FindActionMap("First Person View", throwIfNotFound: true);
        m_FirstPersonView_Shoot = m_FirstPersonView.FindAction("Shoot", throwIfNotFound: true);
        m_FirstPersonView_SwitchView = m_FirstPersonView.FindAction("SwitchView", throwIfNotFound: true);
        m_FirstPersonView_Look = m_FirstPersonView.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Isometric View
    private readonly InputActionMap m_IsometricView;
    private List<IIsometricViewActions> m_IsometricViewActionsCallbackInterfaces = new List<IIsometricViewActions>();
    private readonly InputAction m_IsometricView_Movement;
    private readonly InputAction m_IsometricView_SwitchView;
    public struct IsometricViewActions
    {
        private @PlayerInputActions m_Wrapper;
        public IsometricViewActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_IsometricView_Movement;
        public InputAction @SwitchView => m_Wrapper.m_IsometricView_SwitchView;
        public InputActionMap Get() { return m_Wrapper.m_IsometricView; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IsometricViewActions set) { return set.Get(); }
        public void AddCallbacks(IIsometricViewActions instance)
        {
            if (instance == null || m_Wrapper.m_IsometricViewActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_IsometricViewActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @SwitchView.started += instance.OnSwitchView;
            @SwitchView.performed += instance.OnSwitchView;
            @SwitchView.canceled += instance.OnSwitchView;
        }

        private void UnregisterCallbacks(IIsometricViewActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @SwitchView.started -= instance.OnSwitchView;
            @SwitchView.performed -= instance.OnSwitchView;
            @SwitchView.canceled -= instance.OnSwitchView;
        }

        public void RemoveCallbacks(IIsometricViewActions instance)
        {
            if (m_Wrapper.m_IsometricViewActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IIsometricViewActions instance)
        {
            foreach (var item in m_Wrapper.m_IsometricViewActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_IsometricViewActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public IsometricViewActions @IsometricView => new IsometricViewActions(this);

    // First Person View
    private readonly InputActionMap m_FirstPersonView;
    private List<IFirstPersonViewActions> m_FirstPersonViewActionsCallbackInterfaces = new List<IFirstPersonViewActions>();
    private readonly InputAction m_FirstPersonView_Shoot;
    private readonly InputAction m_FirstPersonView_SwitchView;
    private readonly InputAction m_FirstPersonView_Look;
    public struct FirstPersonViewActions
    {
        private @PlayerInputActions m_Wrapper;
        public FirstPersonViewActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_FirstPersonView_Shoot;
        public InputAction @SwitchView => m_Wrapper.m_FirstPersonView_SwitchView;
        public InputAction @Look => m_Wrapper.m_FirstPersonView_Look;
        public InputActionMap Get() { return m_Wrapper.m_FirstPersonView; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FirstPersonViewActions set) { return set.Get(); }
        public void AddCallbacks(IFirstPersonViewActions instance)
        {
            if (instance == null || m_Wrapper.m_FirstPersonViewActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FirstPersonViewActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @SwitchView.started += instance.OnSwitchView;
            @SwitchView.performed += instance.OnSwitchView;
            @SwitchView.canceled += instance.OnSwitchView;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IFirstPersonViewActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @SwitchView.started -= instance.OnSwitchView;
            @SwitchView.performed -= instance.OnSwitchView;
            @SwitchView.canceled -= instance.OnSwitchView;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IFirstPersonViewActions instance)
        {
            if (m_Wrapper.m_FirstPersonViewActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFirstPersonViewActions instance)
        {
            foreach (var item in m_Wrapper.m_FirstPersonViewActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FirstPersonViewActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FirstPersonViewActions @FirstPersonView => new FirstPersonViewActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard + Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IIsometricViewActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnSwitchView(InputAction.CallbackContext context);
    }
    public interface IFirstPersonViewActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnSwitchView(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
}
